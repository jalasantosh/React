{"version":3,"sources":["one/body.js","common/header.js","common/footer.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Body","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inputUpdate","e","setState","defineProperty","target","id","value","user","userDetails","add","address","state","firstName","lastName","email","city","location","pincode","handleEvent","bind","assertThisInitialized","react_default","a","createElement","src","logo","className","alt","type","onChange","onClick","React","Component","Header","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","title","role","aria-haspopup","aria-labelledby","tabIndex","aria-disabled","placeholder","Footer","App","header","body","footer","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.3482f74b.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from '../logo.svg';\r\n\r\nclass Body extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.user = this.props.userDetails;\r\n        this.add = this.props.userDetails.address;\r\n\r\n        this.state = {\r\n            firstName : this.user.firstName,\r\n            lastName : this.user.lastName,\r\n            email : this.user.email,\r\n            city : this.add.city,\r\n            location : this.user.location,\r\n            pincode : this.add.pincode\r\n        }\r\n\r\n\r\n         // This binding is necessary to make `this` work in the callback\r\n        this.handleEvent = this.handleEvent.bind(this);\r\n    }\r\n\r\n    // we can't change set but we can re-initiate and reassign it.\r\n    handleEvent(){\r\n        this.setState(state => ({\r\n            firstName : \"Santosh\",\r\n            lastName : \"jala\",\r\n            email : \"santosh.jala@gmail.com\",\r\n            city : \"Hyderabad\",\r\n            location : \"kukatpally\",\r\n            pincode : \"500072\"\r\n        }));\r\n    }\r\n\r\n    \r\n    inputUpdate = e => {\r\n        this.setState({ \r\n           [e.target.id]: e.target.value \r\n        })\r\n    };\r\n    \r\n    render(){\r\n        \r\n        return(\r\n            <div>\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" /> <br/>\r\n\r\n                <input type=\"text\" onChange={this.inputUpdate}></input> \r\n                <br></br>\r\n                <p> \r\n                    <h1>\r\n                        {this.state.firstName}\r\n                    </h1>\r\n                </p>\r\n                \r\n                <br></br>\r\n                <button onClick={this.handleEvent}>Change Name</button>\r\n                <ul>\r\n                    <li> <b> First Name: </b> {this.state.firstName}  </li>\r\n                    <li> <b> Last Name: </b> {this.state.lastName}  </li>\r\n                    <li> <b> Location: </b> {this.state.location}  </li>\r\n                    <li> <b> email: </b> {this.state.email}  </li>\r\n\r\n                    <li> <b> City: </b> {this.state.city}  </li>\r\n                    <li> <b> Pincode: </b> {this.state.pincode}  </li>\r\n            \r\n                </ul>\r\n                <button className=\"btn btn-primary\">On</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Body;","import React from 'react';\r\n\r\nfunction Header(props){\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">Navbar</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item active\">\r\n              <a className=\"nav-link\" href=\"#\">Home {props.title} <span className=\"sr-only\">(current)</span></a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">Link</a>\r\n            </li>\r\n            <li className=\"nav-item dropdown\">\r\n              <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                Dropdown\r\n              </a>\r\n              <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                <a className=\"dropdown-item\" href=\"#\">Action</a>\r\n                <a className=\"dropdown-item\" href=\"#\">Another action</a>\r\n                <div className=\"dropdown-divider\" />\r\n                <a className=\"dropdown-item\" href=\"#\">Something else here</a>\r\n              </div>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link disabled\" href=\"#\" tabIndex={-1} aria-disabled=\"true\">Disabled</a>\r\n            </li>\r\n          </ul>\r\n          <form className=\"form-inline my-2 my-lg-0\">\r\n            <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"Submit\">On</button>\r\n          </form>\r\n        </div>\r\n      </nav>\r\n    );\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Footer(){\r\n    return (\r\n        <h1> Footer Tag </h1>\r\n    );\r\n\r\n}\r\n\r\nexport default Footer;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Body from './one/body';\nimport Header from './common/header';\nimport Footer from './common/footer';\n\nfunction App() {\n\n  var bodyData =   {\n    \"firstName\": \"pavan\",\n    lastName : \"jindmpavan\",\n    email : \"pavan.jind@gmail.com\",\n    location : \"Hyderabad\",\n    \"address\" : {\n      city : \"KPHB\",\n      pincode: \"500032\"\n    }\n  }\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Body userDetails={bodyData}/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}